/* mapGenerationTestApplication.cpp
 *
 * Copyright (C) 2025 CSSR4Africa Consortium
 *
 * This project is funded by the African Engineering and Technology Network (Afretec)
 * Inclusive Digital Transformation Research Grant Programme.
 *
 * Website: www.cssr4africa.org
 *
 * This program comes with ABSOLUTELY NO WARRANTY.
 *
 * <detailed functional description>
 * This node is responsible for testing the environment map generation node.
 * The tests validate the actual mapGeneration node by launching it with different
 * configurations and input files, then verifying the outputs. This approach
 * tests the real node functionality rather than replicating the implementation.
 *
 * ...
 * Libraries
 * Standard libraries - std::string, std::vector, std::fstream, std::chrono, std::ctime
 * ROS libraries - ros/ros.h, ros/package.h
 * OpenCV libraries - opencv2/opencv.hpp, opencv2/highgui.hpp, opencv2/imgproc.hpp
 * Google Test - gtest/gtest.h
 *
 * ...
 * Parameters
 *
 * Command-line Parameters
 *
 * None
 * ...
 * Configuration File Parameters
 * Key                        |     Value
 * ---------------------      |     -------------------
 *   mode                     |  CAD
 *   verboseMode              | false
 *   resolution               | 0.01
 *   robotRadius              | 0.3
 *   inputFile                | mapGenerationInput.dat
 *
 * ...
 * Subscribed Topics and Message Types
 *
 * None
 * ...
 * Published Topics and Message Types
 *
 * None
 * 
 * Services Invoked
 *
 * None
 * 
 * Services Advertised and Message Types
 *
 * None
 * ...
 * Input Data Files
 *
 * mapGenerationInput.dat - Contains map dimensions and filenames
 * testObstacles.dat - Contains obstacle definitions
 * testRobotRadius.dat - Contains robot radius values for configuration space tests
 *
 * ...
 * Output Data Files
 *
 * testOutput.logs - Log file containing test results
 * (Output maps are generated by the actual mapGeneration node in its data directory)
 *
 * ...
 * Configuration Files
 *
 * mapGenerationTestConfiguration.ini
 * testConfigLargeRobot.ini
 * testConfigSmallRobot.ini
 * testConfigVerbose.ini
 *
 * ...
 * Example Instantiation of the node
 *
 * roslaunch unit_tests mapGenerationLaunchTestHarness.launch
 *
 * Author: Biruh Girmash, Carnegie Mellon University Africa
 * Email: bgirmash@andrew.cmu.edu
 * Date: June 05, 2025
 * Version: v1.0
 */

 #include <mapGenerationTest/mapGenerationTestInterface.h>
 #include <gtest/gtest.h>
 #include <ros/ros.h>
 #include <string>
 #include <fstream>
 #include <chrono>
 #include <ctime>
 #include <iomanip>
 #include <sstream>
 #include <opencv2/highgui/highgui.hpp>
 #include <sys/wait.h>
 #include <unistd.h>
 
 using namespace mapGenerationTest;
 using namespace cv;
 
 // File to store logs
 std::ofstream logFile; 



int main(int argc, char **argv) {
    // Initialize Google Test FIRST
    ::testing::InitGoogleTest(&argc, argv);
    
    // Initialize ROS
    ros::init(argc, argv, "mapGenerationTest");
    
    std::string node_name = ros::this_node::getName();

    // Check if we're just listing tests
    bool listingTests = false;
    for (int i = 1; i < argc; i++) {
        if (std::string(argv[i]).find("gtest_list_tests") != std::string::npos) {
            listingTests = true;
            break;
        }
    }

    // Only setup custom output if not listing tests
    if (!listingTests) {
        // Format startup message with timestamp
        auto now = std::chrono::system_clock::now();
        time_t time_now = std::chrono::system_clock::to_time_t(now);
        std::tm* timeinfo = std::localtime(&time_now);
        
        std::stringstream ss;
        ss << "[" << std::put_time(timeinfo, "%H:%M:%S") << "] ";
        std::string timestamp = ss.str();

        ROS_INFO("mapGenerationTest: v1.0");
        printf("\n");
        printf("\t\t\t\tThis project is funded by the African Engineering and Technology Network\n");
        printf("\t\t\t\t(Afretec) Inclusive Digital Transformation Research Grant Programme.\n");
        printf("\t\t\t\tWebsite: www.cssr4africa.org\n");
        printf("\t\t\t\tThis program comes with ABSOLUTELY NO WARRANTY\n");
            
            // Startup message
        printf("\n");
        ROS_INFO("mapGenerationTest: start-up.");
        printf("\n");
    
        
        // Set up log file
        std::string packagePath = ros::package::getPath(ROS_PACKAGE_NAME);
        std::string logFilePath = packagePath + "/mapGenerationTest/data/testOutput/testOutput.logs";
        
        // Create directory if it doesn't exist
        std::string testOutputDir = packagePath + "/mapGenerationTest/data/testOutput";
        int result = system(("mkdir -p " + testOutputDir).c_str());
        (void)result; // Suppress warning
        
        // Open log file
        logFile.open(logFilePath, std::ios::out | std::ios::trunc);
        if (!logFile.is_open()) {
            std::cerr << "Failed to open log file: " << logFilePath << std::endl;
            return 1;
        }
        
        // Setup custom listener
        testing::TestEventListeners& listeners = testing::UnitTest::GetInstance()->listeners();
        delete listeners.Release(listeners.default_result_printer());
        listeners.Append(new FormattedOutputListener);
    }
    
    // Run the tests
    int result = RUN_ALL_TESTS();
    
    // Close log file if it was opened
    if (!listingTests && logFile.is_open()) {
        logFile.close();
    }
    
    return result;
}